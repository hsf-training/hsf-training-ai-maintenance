"""GitHub issue and pull request creation utilities."""

import logging
from datetime import datetime
from typing import Dict, List, Optional

from github import GithubException
from github.Repository import Repository

logger = logging.getLogger(__name__)


class GitHubIssueCreator:
    """Creates GitHub issues and pull requests for training suggestions."""
    
    def __init__(self, repository: Repository):
        """Initialize with a GitHub repository."""
        self.repo = repository
    
    def format_suggestion_body(self, suggestions: List[Dict], file_path: str) -> str:
        """Format suggestions into GitHub issue body."""
        body_parts = [
            f"# Content Update Suggestions for `{file_path}`",
            "",
            f"**Generated on:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"**File:** `{file_path}`",
            "",
            "## Suggested Updates",
            ""
        ]
        
        for i, suggestion in enumerate(suggestions, 1):
            body_parts.extend([
                f"### {i}. {suggestion.get('title', 'Update Suggestion')}",
                "",
                f"**Type:** {suggestion.get('type', 'General')}",
                f"**Priority:** {suggestion.get('priority', 'Medium')}",
                "",
                f"**Description:**",
                suggestion.get('description', 'No description provided.'),
                "",
                f"**Justification:**",
                suggestion.get('justification', 'No justification provided.'),
                ""
            ])
            
            if 'specific_changes' in suggestion:
                body_parts.extend([
                    "**Specific Changes:**",
                    suggestion['specific_changes'],
                    ""
                ])
            
            if 'resources' in suggestion:
                body_parts.extend([
                    "**Resources:**",
                    suggestion['resources'],
                    ""
                ])
            
            body_parts.append("---")
            body_parts.append("")
        
        body_parts.extend([
            "## Notes",
            "",
            "- This issue was automatically generated by the HSF Training AI Maintenance Agent",
            "- Review each suggestion carefully before implementing changes",
            "- Consider the educational context and difficulty level when making updates",
            "- Close this issue once the relevant suggestions have been addressed"
        ])
        
        return "\n".join(body_parts)
    
    def create_suggestion_issue(self, 
                              suggestions: List[Dict], 
                              file_path: str,
                              labels: Optional[List[str]] = None) -> Optional[int]:
        """Create a GitHub issue with content suggestions."""
        if not suggestions:
            logger.warning(f"No suggestions provided for {file_path}")
            return None
        
        # Generate issue title
        title = f"Content update suggestions for {file_path}"
        
        # Format issue body
        body = self.format_suggestion_body(suggestions, file_path)
        
        # Default labels
        default_labels = ["enhancement", "content-update", "ai-generated"]
        issue_labels = labels or default_labels
        
        try:
            issue = self.repo.create_issue(
                title=title,
                body=body,
                labels=issue_labels
            )
            
            logger.info(f"Created issue #{issue.number}: {title}")
            return issue.number
            
        except GithubException as e:
            logger.error(f"Failed to create issue for {file_path}: {e}")
            return None
    
    def create_batch_summary_issue(self, 
                                  analysis_results: Dict[str, List[Dict]],
                                  repo_url: str) -> Optional[int]:
        """Create a summary issue for batch analysis results."""
        if not analysis_results:
            logger.warning("No analysis results provided for summary issue")
            return None
        
        title = f"HSF Training Content Analysis Summary - {datetime.now().strftime('%Y-%m-%d')}"
        
        body_parts = [
            f"# HSF Training Content Analysis Summary",
            "",
            f"**Repository:** {repo_url}",
            f"**Analysis Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"**Files Analyzed:** {len(analysis_results)}",
            "",
            "## Overview",
            ""
        ]
        
        total_suggestions = sum(len(suggestions) for suggestions in analysis_results.values())
        body_parts.extend([
            f"- **Total Files Analyzed:** {len(analysis_results)}",
            f"- **Total Suggestions Generated:** {total_suggestions}",
            "",
            "## Files with Suggestions",
            ""
        ])
        
        for file_path, suggestions in analysis_results.items():
            if suggestions:
                body_parts.extend([
                    f"### `{file_path}` ({len(suggestions)} suggestions)",
                    ""
                ])
                
                for suggestion in suggestions[:3]:  # Show first 3 suggestions
                    body_parts.extend([
                        f"- **{suggestion.get('title', 'Update')}** "
                        f"({suggestion.get('type', 'General')}): "
                        f"{suggestion.get('description', 'No description')[:100]}..."
                    ])
                
                if len(suggestions) > 3:
                    body_parts.append(f"- _{len(suggestions) - 3} more suggestions..._")
                
                body_parts.append("")
        
        body_parts.extend([
            "## Next Steps",
            "",
            "1. Review individual suggestion issues created for each file",
            "2. Prioritize updates based on suggestion types and educational impact",
            "3. Implement changes following HSF training guidelines",
            "4. Update version numbers and changelogs as appropriate",
            "",
            "---",
            "*This summary was automatically generated by the HSF Training AI Maintenance Agent*"
        ])
        
        try:
            issue = self.repo.create_issue(
                title=title,
                body="\n".join(body_parts),
                labels=["enhancement", "maintenance", "ai-generated", "summary"]
            )
            
            logger.info(f"Created summary issue #{issue.number}: {title}")
            return issue.number
            
        except GithubException as e:
            logger.error(f"Failed to create summary issue: {e}")
            return None
    
    def check_existing_issues(self, file_path: str) -> List[int]:
        """Check for existing open issues related to a file."""
        existing_issues = []
        
        try:
            issues = self.repo.get_issues(state="open")
            
            for issue in issues:
                if file_path in issue.title or file_path in issue.body:
                    existing_issues.append(issue.number)
                    
        except GithubException as e:
            logger.error(f"Failed to check existing issues: {e}")
        
        return existing_issues